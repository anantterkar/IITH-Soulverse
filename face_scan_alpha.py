# -*- coding: utf-8 -*-
"""Face-Scan-Alpha.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PDkOxmt2NRDMfKKmrTK9NqYtQszC00gf
"""



!pip install deepface



from google.colab import drive
drive.mount('/content/drive')

models = [
  # "VGG-Face",
  "Facenet",
  "Facenet512",
  # "OpenFace",
  # "DeepFace",
  # "DeepID",
  # "ArcFace",
  # "Dlib",
  "SFace",
  "GhostFaceNet",
]

from deepface import DeepFace

emb1 = []
emb2 = []
for i in range(len(models)):
  embobj1 = DeepFace.represent(img_path = "/content/prateek1.jpg",
      model_name = models[i], detector_backend='retinaface'
  )
  embobj2 = DeepFace.represent(img_path = "/content/pabitra1.jpg",
      model_name = models[i], detector_backend='retinaface')
  emb1.append(embobj1)
  emb2.append(embobj2)



def similarity(anchor_emb, pos_emb):
  # print(anchor_emb, pos_emb)
  cnt=0
  anchor_emb = np.array(anchor_emb).round(0)
  pos_emb = np.array(pos_emb).round(0)
  for j in range(len(anchor_emb)):
    if(anchor_emb[j] == pos_emb[j]):
      cnt += 1
  # print((cnt/size) * 100)
  return (cnt/len(anchor_emb)) * 100


import glob
from tqdm import tqdm
from deepface import DeepFace
dir_path = "/content/drive/MyDrive/selfie_dataset"
final_percentage=dict()
for person_path in tqdm(glob.glob(dir_path + "/*")):
  try:
    person = glob.glob(person_path + "/*")
    person_name = person[0].split("/")[-2]

    anchor_emb = DeepFace.represent(img_path = person[0], model_name = "Facenet512", detector_backend='retinaface')
    percentage = [] #matching between anchor and positive images
    for imgpath in tqdm(person[1:]):
      pos_emb = DeepFace.represent(img_path = imgpath, model_name = "Facenet512", detector_backend='retinaface')
      # print(pos_emb)
      # break
      percentage.append(similarity(anchor_emb[0]["embedding"], pos_emb[0]["embedding"]))

    avg_percentage = sum(percentage)/len(percentage)
    final_percentage[person_name] = percentage
    # final_percentage.append(avg_percentage)
  except:  pass

final_percentage

import numpy as np
for i in range(len(models)):
  if(i==0):
    print("Face-Scan-Alpha")
  else:
    print(models[i])
  embedding1 = emb1[i][0]["embedding"]
  embedding2 = emb2[i][0]["embedding"]
  size = len(embedding1)
  embedding1 = np.array(embedding1)
  embedding2 = np.array(embedding2)
  embedding1_rounded = embedding1.round(0)
  embedding2_rounded = embedding2.round(0)
  # if(i==0):
  #   print("Embedding1 = ",embedding1)
  #   print("Embedding2 = ", embedding2)
  cnt=0
  for j in range(size):
    if(embedding1_rounded[j] == embedding2_rounded[j]):
      cnt += 1
  print((cnt/size) * 100)
  print("\n\n")

embedding1 = emb1[1][0]["embedding"]
embedding2 = emb2[1][0]["embedding"]
embedding1 = np.array(embedding1)
embedding2 = np.array(embedding2)
vector128_1 = []
vector128_2 = []
i=0
while(i < 509):
  vector128_1.append(embedding1[i]*1000 + embedding1[i]*100 + embedding1[i]*10 + embedding1[i])
  vector128_2.append(embedding2[i]*1000 + embedding2[i]*100 + embedding2[i]*10 + embedding2[i])
  i=i+4
vector128_1 = np.array(vector128_1)
vector128_2 = np.array(vector128_2)
vector128_1_rounded = vector128_1.round(0)
vector128_2_rounded = vector128_2.round(0)
print(vector128_1_rounded.size)
# cnt=0
# for i in range(len(embedding1_rounded)):
#   if(embedding1_rounded[i] != embedding2_rounded[i]):
#     print("Image1 = ",embedding1_rounded[i])
#     print("Image2 = ",embedding2_rounded[i])
#     cnt=cnt+1
# print(cnt)

import csv
import pandas as pd
csv_file_path = "vectors.csv"

np.savetxt(csv_file_path, vector128_1_rounded, delimiter=",", fmt="%d")
np.savetxt(csv_file_path, vector128_2_rounded, delimiter=",", fmt="%d")

for i in range(len(embedding1_rounded)):
  print(embedding1_rounded)



import matplotlib
from matplotlib import pyplot as plt
x_values = range(embedding1.shape[0])
plt.plot(x_values, embedding1_rounded)
plt.plot(x_values, embedding2_rounded)